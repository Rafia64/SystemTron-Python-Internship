import pygame as pg
from random import randrange

# Constants
WINDOW = 500
TILE_SIZE = 25
RANGE = (TILE_SIZE // 2, WINDOW - TILE_SIZE // 2, TILE_SIZE)
get_random_position = lambda: [randrange(*RANGE), randrange(*RANGE)]

# Initialize pygame
pg.init()
screen = pg.display.set_mode([WINDOW] * 2)
clock = pg.time.Clock()

# Snake initialization
snake = pg.Rect([0, 0, TILE_SIZE, TILE_SIZE])
snake.center = get_random_position()
length = 1
segments = [snake.copy()]
snake_dir = (0, 0)  # Initial direction (not moving)

# Food initialization
food = pg.Rect([0, 0, TILE_SIZE, TILE_SIZE])
food.center = get_random_position()

# Timing
time, time_step = 0, 110

while True:
    for event in pg.event.get():
        if event.type == pg.QUIT:
            exit()
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_w and snake_dir != (0, TILE_SIZE):  # Prevent reversing
                snake_dir = (0, -TILE_SIZE)
            if event.key == pg.K_s and snake_dir != (0, -TILE_SIZE):  # Prevent reversing
                snake_dir = (0, TILE_SIZE)
            if event.key == pg.K_a and snake_dir != (TILE_SIZE, 0):  # Prevent reversing
                snake_dir = (-TILE_SIZE, 0)
            if event.key == pg.K_d and snake_dir != (-TILE_SIZE, 0):  # Prevent reversing
                snake_dir = (TILE_SIZE, 0)

    # Move snake
    time_now = pg.time.get_ticks()
    if time_now - time > time_step:
        time = time_now
        snake.move_ip(snake_dir)  # Move the snake in the current direction
        segments.append(snake.copy())  # Add new head position
        segments = segments[-length:]  # Keep only the last `length` segments

    # Check if snake eats food
    if snake.colliderect(food):
        food.center = get_random_position()  # Move food to a new random position
        length += 1  # Increase snake length

    # Check if snake collides with itself
    if any(segment.colliderect(snake) for segment in segments[:-1]):
        print("Game Over! Collision with self.")
        exit()

    # Check if snake goes out of bounds
    if not (0 <= snake.left < WINDOW and 0 <= snake.top < WINDOW):
        print("Game Over! Out of bounds.")
        exit()

    # Draw everything
    screen.fill('black')
    [pg.draw.rect(screen, 'green', segment) for segment in segments]  # Draw snake
    pg.draw.rect(screen, 'red', food)  # Draw food
    pg.display.flip()
    clock.tick(60)
